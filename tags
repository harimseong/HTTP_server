!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ADD	io/IIoMultiplex.hpp	/^		ADD = 1,$/;"	e	enum:IoMultiplexEnum::e_operation
ALLOC_SIZE	ServerManager.hpp	/^#define ALLOC_SIZE /;"	d
AMethod	method/AMethod.hpp	/^class AMethod$/;"	c
AMethod_hpp	method/AMethod.hpp	/^#define AMethod_hpp$/;"	d
APARSER_HPP	parser/AParser.hpp	/^#define APARSER_HPP$/;"	d
AParser	parser/AParser.hpp	/^	AParser() {};$/;"	f	class:AParser
AParser	parser/AParser.hpp	/^class	AParser$/;"	c
ASocket	socket/ASocket.hpp	/^	ASocket() {};$/;"	f	class:ASocket
ASocket	socket/ASocket.hpp	/^class ASocket$/;"	c
ASocket_hpp	socket/ASocket.hpp	/^#define ASocket_hpp$/;"	d
BACKLOG	socket/ServerSocket.cpp	/^#define BACKLOG /;"	d	file:
BUFFER_SIZE	Client.cpp	/^#define BUFFER_SIZE /;"	d	file:
CGI	Server.hpp	/^		CGI = 3$/;"	e	enum:EventObject::e_type
CGI_HPP	cgi/Cgi.hpp	/^#define CGI_HPP$/;"	d
CLIENT	Server.hpp	/^		CLIENT = 2,$/;"	e	enum:EventObject::e_type
CLIENT_HPP	Client.hpp	/^#define CLIENT_HPP$/;"	d
CLIENT_HPP	test/Connection.hpp	/^#define CLIENT_HPP$/;"	d
COMPILE_MODE	Makefile	/^COMPILE_MODE=	DEBUG.mode$/;"	m
COMPILE_MODE	Makefile	/^COMPILE_MODE=	RELEASE.mode$/;"	m
CONFIGPARSEREXCEPTION_HPP	exception/ConfigParserException.hpp	/^#define CONFIGPARSEREXCEPTION_HPP$/;"	d
CONFIGPARSER_HPP	parser/ConfigParser.hpp	/^#define CONFIGPARSER_HPP$/;"	d
CXX	Makefile	/^CXX			=	c++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS	=	-Wall -Wextra -Werror -std=c++98 -MMD$/;"	m
Cgi	cgi/Cgi.cpp	/^Cgi::Cgi()$/;"	f	class:Cgi
Cgi	cgi/Cgi.cpp	/^Cgi::Cgi(Cgi const& cgi)$/;"	f	class:Cgi
Cgi	cgi/Cgi.hpp	/^class	Cgi$/;"	c
Client	Client.cpp	/^Client::Client(Client const& client)$/;"	f	class:Client
Client	Client.cpp	/^Client::Client(Server& server, int fd)$/;"	f	class:Client
Client	Client.hpp	/^class	Client$/;"	c
ClientSocket	socket/ClientSocket.cpp	/^ClientSocket::ClientSocket()$/;"	f	class:ClientSocket
ClientSocket	socket/ClientSocket.cpp	/^ClientSocket::ClientSocket(const ClientSocket& copy)$/;"	f	class:ClientSocket
ClientSocket	socket/ClientSocket.hpp	/^class ClientSocket : public ASocket<ServerSocket>$/;"	c
ClientSocket_hpp	socket/ClientSocket.hpp	/^#define ClientSocket_hpp$/;"	d
Communicator	communicator/Communicator.cpp	/^Communicator::Communicator()$/;"	f	class:Communicator
Communicator	communicator/Communicator.hpp	/^class Communicator$/;"	c
Communicator_hpp	communicator/Communicator.hpp	/^#define Communicator_hpp$/;"	d
ConfigParser	parser/ConfigParser.cpp	/^ConfigParser::ConfigParser()$/;"	f	class:ConfigParser
ConfigParser	parser/ConfigParser.hpp	/^class	ConfigParser: public AParser<FileTokenizer, std::vector<Server> >$/;"	c
ConfigParserException	exception/ConfigParserException.cpp	/^ConfigParser::ConfigParserException::ConfigParserException(ConfigParserException const& configParserException)$/;"	f	class:ConfigParser::ConfigParserException
ConfigParserException	exception/ConfigParserException.cpp	/^ConfigParser::ConfigParserException::ConfigParserException(const string& message)$/;"	f	class:ConfigParser::ConfigParserException
ConfigParserException	exception/ConfigParserException.hpp	/^class	ConfigParser::ConfigParserException: public std::exception$/;"	c	class:ConfigParser
Connection	test/Connection.cpp	/^Connection::Connection(Connection const& connection)$/;"	f	class:Connection
Connection	test/Connection.cpp	/^Connection::Connection(int socket)$/;"	f	class:Connection
Connection	test/Connection.hpp	/^class	Connection$/;"	c
DEBUG	Logger.hpp	/^		DEBUG = 4$/;"	e	enum:Logger::e_types
DEBUGFLAGS	Makefile	/^DEBUGFLAGS	=	-g -fsanitize=address$/;"	m
DELETE	http/Request.hpp	/^		DELETE$/;"	e	enum:Request::e_method
DELETE	io/IIoMultiplex.hpp	/^		DELETE = 2,$/;"	e	enum:IoMultiplexEnum::e_operation
DEP	Makefile	/^DEP			:=	$(OBJ:%.o=%.d)$/;"	m
DEP	test/Makefile	/^DEP = 	$(OBJ:%.o=%.d)$/;"	m
DISABLED	Logger.hpp	/^		DISABLED = 0,$/;"	e	enum:Logger::e_types
EMPTY	Server.hpp	/^		EMPTY = 0,$/;"	e	enum:EventObject::e_type
END	io/IIoMultiplex.hpp	/^		END = 2,$/;"	e	enum:IoMultiplexEnum::e_eventStatus
EPOLL_HPP	io/Epoll.hpp	/^#define EPOLL_HPP$/;"	d
EPOLL_IO	main.cpp	/^# define EPOLL_IO$/;"	d	file:
ERROR	Logger.hpp	/^		ERROR = 1,$/;"	e	enum:Logger::e_types
EVENT_SIZE	Server.hpp	/^#define EVENT_SIZE /;"	d
EVENT_SIZE	Server_template.hpp	/^#define EVENT_SIZE /;"	d
Epoll	io/Epoll.cpp	/^Epoll::Epoll()$/;"	f	class:Epoll
Epoll	io/Epoll.cpp	/^Epoll::Epoll(Epoll const& epoll)$/;"	f	class:Epoll
Epoll	io/Epoll.hpp	/^class	Epoll$/;"	c
EventData	ServerManager.hpp	/^	typedef typename IoEventPoller::EventData	EventData;$/;"	t	class:ServerManager
EventData	Server_template.hpp	/^	typedef typename IoEventHandler::EventData	EventData;$/;"	t	class:Server
EventData	io/IIoMultiplex.hpp	/^	typedef typename Attr::EventData	EventData;$/;"	t	class:IIoMultiplex
EventData	io/Kqueue.hpp	/^	typedef Kevent					EventData;$/;"	t	struct:KqueueAttr
EventList	ServerManager.hpp	/^	typedef typename IoEventPoller::EventList	EventList;$/;"	t	class:ServerManager
EventList	io/IIoMultiplex.hpp	/^	typedef typename Attr::EventList	EventList;$/;"	t	class:IIoMultiplex
EventList	io/Kqueue.hpp	/^	typedef std::vector<EventData>	EventList;$/;"	t	struct:KqueueAttr
EventObject	Server.hpp	/^struct	EventObject$/;"	s
EventStatus	io/IIoMultiplex.hpp	/^	typedef enum e_eventStatus			EventStatus;$/;"	t	class:IIoMultiplex	typeref:enum:IIoMultiplex::e_eventStatus
FDMANAGER_HPP	test/FdManager.hpp	/^#define FDMANAGER_HPP$/;"	d
FILETOKENIZEREXCEPTION_HPP	exception/FileTokenizerException.hpp	/^#define FILETOKENIZEREXCEPTION_HPP$/;"	d
FILETOKENIZER_HPP	tokenizer/FileTokenizer.hpp	/^#define FILETOKENIZER_HPP$/;"	d
FILT_ERROR	io/IIoMultiplex.hpp	/^		FILT_ERROR = 0x4$/;"	e	enum:IoMultiplexEnum::e_filters
FINISHED	parser/HttpRequestParser.hpp	/^		FINISHED$/;"	e	enum:HttpRequestParser::e_readStatus
FdGetFileSize	test/readFunctionUsingString.cpp	/^long FdGetFileSize(int fd)$/;"	f
FdManager	test/FdManager.cpp	/^FdManager::FdManager()$/;"	f	class:FdManager
FdManager	test/FdManager.cpp	/^FdManager::FdManager(FdManager const& fdManager)$/;"	f	class:FdManager
FdManager	test/FdManager.hpp	/^class	FdManager$/;"	c
FileTokenizer	tokenizer/FileTokenizer.cpp	/^FileTokenizer::FileTokenizer()$/;"	f	class:FileTokenizer
FileTokenizer	tokenizer/FileTokenizer.hpp	/^class	FileTokenizer: public ITokenizer$/;"	c
FileTokenizerException	exception/FileTokenizerException.hpp	/^	FileTokenizerException(const std::string& message): m_message("FileTokenizerException: " + message) {};$/;"	f	class:FileTokenizer::FileTokenizerException
FileTokenizerException	exception/FileTokenizerException.hpp	/^class	FileTokenizer::FileTokenizerException: public std::exception$/;"	c	class:FileTokenizer
GET	http/Request.hpp	/^		GET = 1,$/;"	e	enum:Request::e_method
GET_SOCKADDR_IN	Server_template.hpp	/^#define GET_SOCKADDR_IN(/;"	d
GET_SOCKADDR_IN	socket_/SocketTypes.hpp	/^# define GET_SOCKADDR_IN(/;"	d
GET_SOCKADDR_IN	socket_/SocketTypes.hpp	/^#define GET_SOCKADDR_IN(/;"	d
GET_SOCKADDR_IN	test/ServerManager.cpp	/^#define GET_SOCKADDR_IN(/;"	d	file:
GET_SOCKADDR_IN	test/ServerManager.cpp	/^#undef GET_SOCKADDR_IN$/;"	d	file:
HEAD	http/Request.hpp	/^		HEAD,$/;"	e	enum:Request::e_method
HEADER_FIELDS	parser/HttpRequestParser.hpp	/^		HEADER_FIELDS,$/;"	e	enum:HttpRequestParser::e_readStatus
HTTPERRORHANDLER_HPP	exception/HttpErrorHandler.hpp	/^#define HTTPERRORHANDLER_HPP$/;"	d
HTTPREQUESTPARSER_HPP	parser/HttpRequestParser.hpp	/^#define HTTPREQUESTPARSER_HPP$/;"	d
HTTPSTREAMTOKENIZER_HPP	tokenizer/HttpStreamTokenizer.hpp	/^#define HTTPSTREAMTOKENIZER_HPP$/;"	d
HeaderFieldsMap	parser/HttpRequestParser.hpp	/^typedef std::map<std::string, std::vector<std::string> > HeaderFieldsMap;$/;"	t
HttpErrorHandler	exception/HttpErrorHandler.cpp	/^HttpErrorHandler::HttpErrorHandler(const HttpErrorHandler& httpErrorHandler)$/;"	f	class:HttpErrorHandler
HttpErrorHandler	exception/HttpErrorHandler.cpp	/^HttpErrorHandler::HttpErrorHandler(int errorCode)$/;"	f	class:HttpErrorHandler
HttpErrorHandler	exception/HttpErrorHandler.hpp	/^class	HttpErrorHandler$/;"	c
HttpRequestParser	parser/HttpRequestParser.cpp	/^HttpRequestParser::HttpRequestParser(const HttpRequestParser& parser)$/;"	f	class:HttpRequestParser
HttpRequestParser	parser/HttpRequestParser.cpp	/^HttpRequestParser::HttpRequestParser(std::string& buffer)$/;"	f	class:HttpRequestParser
HttpRequestParser	parser/HttpRequestParser.hpp	/^class	HttpRequestParser$/;"	c
HttpStreamTokenizer	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::HttpStreamTokenizer()$/;"	f	class:HttpStreamTokenizer
HttpStreamTokenizer	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::HttpStreamTokenizer(const HttpStreamTokenizer& tokenizer)$/;"	f	class:HttpStreamTokenizer
HttpStreamTokenizer	tokenizer/HttpStreamTokenizer.hpp	/^class	HttpStreamTokenizer: public ITokenizer$/;"	c
IIOMULTIPLEX_HPP	io/IIoMultiplex.hpp	/^#define IIOMULTIPLEX_HPP$/;"	d
IIoMultiplex	io/IIoMultiplex.hpp	/^	IIoMultiplex() {};$/;"	f	class:IIoMultiplex
IIoMultiplex	io/IIoMultiplex.hpp	/^class	IIoMultiplex: public IoMultiplexEnum$/;"	c
INCL_PATH	Makefile	/^INCL_PATH	=	-I.\/\\$/;"	m
INFO	Logger.hpp	/^		INFO = 3,$/;"	e	enum:Logger::e_types
IO_EVENT_POLLER	main.cpp	/^# define IO_EVENT_POLLER /;"	d	file:
IOmultiplex	test/ServerManager.cpp	/^void	ServerManager::IOmultiplex()$/;"	f	class:ServerManager
IREQUEST_HPP	test/IRequest.hpp	/^#define IREQUEST_HPP$/;"	d
IRESPONSE_HPP	test/IResponse.hpp	/^#define IRESPONSE_HPP$/;"	d
IRequest	test/IRequest.hpp	/^class	IRequest$/;"	c
IResponse	test/IResponse.hpp	/^class	IResponse$/;"	c
ITOKENIZER_HPP	tokenizer/ITokenizer.hpp	/^#define ITOKENIZER_HPP$/;"	d
ITokenizer	tokenizer/ITokenizer.hpp	/^	ITokenizer() {};$/;"	f	class:ITokenizer
ITokenizer	tokenizer/ITokenizer.hpp	/^class	ITokenizer$/;"	c
IoMultiplexEnum	io/IIoMultiplex.hpp	/^struct	IoMultiplexEnum$/;"	s
KQUEUE_HPP	io/Kqueue.hpp	/^# define KQUEUE_HPP$/;"	d
KQUEUE_IO	main.cpp	/^# define KQUEUE_IO$/;"	d	file:
Kevent	io/Kqueue.hpp	/^struct	Kevent: public kevent$/;"	s
Kqueue	io/Kqueue.cpp	/^Kqueue::Kqueue()$/;"	f	class:Kqueue
Kqueue	io/Kqueue.cpp	/^Kqueue::Kqueue(Kqueue const& kqueue)$/;"	f	class:Kqueue
Kqueue	io/Kqueue.hpp	/^class	Kqueue: public IIoMultiplex<KqueueAttr>$/;"	c
KqueueAttr	io/Kqueue.hpp	/^struct	KqueueAttr$/;"	s
LOCATIONPARSER_HPP	parser/LocationParser.hpp	/^#define LOCATIONPARSER_HPP$/;"	d
LOCATION_HPP	Location.hpp	/^#define LOCATION_HPP$/;"	d
LOGGER_HPP	Logger.hpp	/^#define LOGGER_HPP$/;"	d
Location	Location.cpp	/^Location::Location()$/;"	f	class:Location
Location	Location.cpp	/^Location::Location(const Location& location)$/;"	f	class:Location
Location	Location.hpp	/^class	Location$/;"	c
LocationParser	parser/LocationParser.cpp	/^LocationParser::LocationParser(FileTokenizer& tokenizer)$/;"	f	class:LocationParser
LocationParser	parser/LocationParser.hpp	/^class	LocationParser: public AParser<FileTokenizer, Location>$/;"	c
Logger	Logger.cpp	/^Logger::Logger()$/;"	f	class:Logger
Logger	Logger.cpp	/^Logger::Logger(Logger const& logger)$/;"	f	class:Logger
Logger	Logger.hpp	/^class	Logger$/;"	c
MAXSOCK	test/getaddrinfo_test.c	/^#define MAXSOCK /;"	d	file:
MAX_BUFFER_LEN	Logger.cpp	/^#define	MAX_BUFFER_LEN /;"	d	file:
MESSAGE_BODY	parser/HttpRequestParser.hpp	/^		MESSAGE_BODY,$/;"	e	enum:HttpRequestParser::e_readStatus
MODIFY	io/IIoMultiplex.hpp	/^		MODIFY = 3,$/;"	e	enum:IoMultiplexEnum::e_operation
MaxFd	test/general_socket_tests.cpp	/^struct	MaxFd$/;"	s	file:
NAME	Makefile	/^NAME		=	webserv$/;"	m
NON_BLOCK	io/IIoMultiplex.hpp	/^		NON_BLOCK = 4$/;"	e	enum:IoMultiplexEnum::e_eventStatus
NORMAL	io/IIoMultiplex.hpp	/^		NORMAL = 1,$/;"	e	enum:IoMultiplexEnum::e_eventStatus
OBJ	Makefile	/^OBJ			:=	$(SRC:%.cpp=%.o)$/;"	m
OBJ	test/Makefile	/^OBJ	=	$(SRC:%.cpp=%.o)$/;"	m
OP_ERROR	io/IIoMultiplex.hpp	/^		OP_ERROR = 4$/;"	e	enum:IoMultiplexEnum::e_operation
POST	http/Request.hpp	/^		POST,$/;"	e	enum:Request::e_method
PUT	http/Request.hpp	/^		PUT,$/;"	e	enum:Request::e_method
READ	io/IIoMultiplex.hpp	/^		READ = 0x1,$/;"	e	enum:IoMultiplexEnum::e_filters
REQUEST_BODY	communicator/Request.hpp	/^		REQUEST_BODY,$/;"	e	enum:Request::requestSection
REQUEST_BUFFER_SIZE	http/Request.cpp	/^#define REQUEST_BUFFER_SIZE /;"	d	file:
REQUEST_END	communicator/Request.hpp	/^		REQUEST_END$/;"	e	enum:Request::requestSection
REQUEST_EOF	http/Request.cpp	/^#define REQUEST_EOF /;"	d	file:
REQUEST_HEADER	communicator/Request.hpp	/^		REQUEST_HEADER,$/;"	e	enum:Request::requestSection
REQUEST_HEADER_END	communicator/Request.hpp	/^		REQUEST_HEADER_END,$/;"	e	enum:Request::requestSection
REQUEST_HPP	communicator/Request.hpp	/^#define REQUEST_HPP$/;"	d
REQUEST_HPP	http/Request.hpp	/^#define REQUEST_HPP$/;"	d
REQUEST_LINE	communicator/Request.hpp	/^		REQUEST_LINE = 0,$/;"	e	enum:Request::requestSection
REQUEST_LINE	parser/HttpRequestParser.hpp	/^		REQUEST_LINE = 0,$/;"	e	enum:HttpRequestParser::e_readStatus
RESPONSE_HPP	http/Response.hpp	/^#define RESPONSE_HPP$/;"	d
RM	Makefile	/^RM			=	rm -f$/;"	m
Request	communicator/Request.cpp	/^Request::Request()$/;"	f	class:Request
Request	communicator/Request.hpp	/^class Request$/;"	c
Request	http/Request.cpp	/^Request::Request(const Request& request)$/;"	f	class:Request
Request	http/Request.cpp	/^Request::Request(const Socket<Tcp>& socket)$/;"	f	class:Request
Request	http/Request.hpp	/^class	Request$/;"	c
Response	communicator/Response.cpp	/^Response::Response()$/;"	f	class:Response
Response	communicator/Response.hpp	/^class Response$/;"	c
Response	http/Response.cpp	/^Response::Response()$/;"	f	class:Response
Response	http/Response.cpp	/^Response::Response(const Response& response)$/;"	f	class:Response
Response	http/Response.hpp	/^class	Response$/;"	c
Response_hpp	communicator/Response.hpp	/^#define Response_hpp$/;"	d
SERVER	Server.hpp	/^		SERVER = 1,$/;"	e	enum:EventObject::e_type
SERVERMANAGER_HPP	ServerManager.hpp	/^#define SERVERMANAGER_HPP$/;"	d
SERVERMANAGER_HPP	test/ServerManager.hpp	/^#define SERVERMANAGER_HPP$/;"	d
SERVERPARSER_HPP	parser/ServerParser.hpp	/^#define SERVERPARSER_HPP$/;"	d
SERVER_HPP	Server.hpp	/^#define SERVER_HPP$/;"	d
SERVER_HPP	Server_template.hpp	/^#define SERVER_HPP$/;"	d
SERVER_HPP	test/Server.hpp	/^#define SERVER_HPP$/;"	d
SOCKETTYPES_HPP	socket_/SocketTypes.hpp	/^#define SOCKETTYPES_HPP$/;"	d
SOCKET_HPP	socket_/Socket.hpp	/^#define SOCKET_HPP$/;"	d
SRC	Makefile	/^SRC			=	main.cpp\\$/;"	m
SRC	test/Makefile	/^SRC	=	syscall_test\/test.cpp$/;"	m
STAT_ERROR	io/IIoMultiplex.hpp	/^		STAT_ERROR = 3,$/;"	e	enum:IoMultiplexEnum::e_eventStatus
Server	Server.cpp	/^Server::Server()$/;"	f	class:Server
Server	Server.cpp	/^Server::Server(Server const& server)$/;"	f	class:Server
Server	Server.hpp	/^class	Server$/;"	c
Server	Server_template.hpp	/^Server<IoEventHandler>::Server()$/;"	f	class:Server
Server	Server_template.hpp	/^Server<IoEventHandler>::Server(Server const& server)$/;"	f	class:Server
Server	Server_template.hpp	/^class	Server$/;"	c
Server	test/Server.cpp	/^Server::Server(Server const& server)$/;"	f	class:Server
Server	test/Server.cpp	/^Server::Server(int listenSocket)$/;"	f	class:Server
Server	test/Server.hpp	/^class	Server$/;"	c
ServerManager	ServerManager.hpp	/^	ServerManager(ServerManager const& serverManager) {(void)serverManager;}$/;"	f	class:ServerManager
ServerManager	ServerManager.hpp	/^ServerManager<IoEventPoller>::ServerManager()$/;"	f	class:ServerManager
ServerManager	ServerManager.hpp	/^class	ServerManager$/;"	c
ServerManager	test/ServerManager.cpp	/^ServerManager::ServerManager()$/;"	f	class:ServerManager
ServerManager	test/ServerManager.hpp	/^class	ServerManager$/;"	c
ServerParser	parser/ServerParser.cpp	/^ServerParser::ServerParser(FileTokenizer& m_tokenizer)$/;"	f	class:ServerParser
ServerParser	parser/ServerParser.hpp	/^class	ServerParser: public AParser<FileTokenizer, Server>$/;"	c
ServerSocket	socket/ServerSocket.cpp	/^ServerSocket::ServerSocket()$/;"	f	class:ServerSocket
ServerSocket	socket/ServerSocket.hpp	/^class ServerSocket : public ASocket<sockaddr_in>$/;"	c
ServerSocket_hpp	socket/ServerSocket.hpp	/^#define ServerSocket_hpp$/;"	d
Socket	socket_/Socket.hpp	/^Socket<SocketType>::Socket() throw()$/;"	f	class:Socket
Socket	socket_/Socket.hpp	/^Socket<SocketType>::Socket(Socket const& socket) throw()$/;"	f	class:Socket
Socket	socket_/Socket.hpp	/^Socket<SocketType>::Socket(int fd, const socketAddr* addr) throw()$/;"	f	class:Socket
Socket	socket_/Socket.hpp	/^class	Socket$/;"	c
SocketStreamTokenizer	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::SocketStreamTokenizer()$/;"	f	class:SocketStreamTokenizer
SocketStreamTokenizer	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::SocketStreamTokenizer(const SocketStreamTokenizer& tokenizer)$/;"	f	class:SocketStreamTokenizer
Tcp	socket_/SocketTypes.hpp	/^struct	Tcp$/;"	s
Util	util/Util.hpp	/^class Util$/;"	c
Util_hpp	util/Util.hpp	/^#define Util_hpp$/;"	d
WARNING	Logger.hpp	/^		WARNING = 2,$/;"	e	enum:Logger::e_types
WRITE	io/IIoMultiplex.hpp	/^		WRITE = 0x2,$/;"	e	enum:IoMultiplexEnum::e_filters
accept	socket_/Socket.hpp	/^Socket<SocketType>::accept(sockaddr* raddr, socklen_t* sockLen) const throw()$/;"	f	class:Socket
acceptConnection	test/Server.cpp	/^int	Server::acceptConnection(fd_set* readSet)$/;"	f	class:Server
add	io/Kqueue.cpp	/^Kqueue::add(int fd, const EventData& event)$/;"	f	class:Kqueue
add	io/Kqueue.cpp	/^Kqueue::add(int fd, e_operation flag, e_filters filter)$/;"	f	class:Kqueue
addEventObject	ServerManager.hpp	/^ServerManager<IoEventPoller>::addEventObject(typename EventObject::e_type type, int fd, Server* server)$/;"	f	class:ServerManager
addNewServer	test/ServerManager.cpp	/^void	ServerManager::addNewServer()$/;"	f	class:ServerManager
addServer	test/ServerManager.cpp	/^void	ServerManager::addServer(Server const& server)$/;"	f	class:ServerManager
bind	socket_/Socket.hpp	/^Socket<SocketType>::bind(socketAddr* addr) throw()$/;"	f	class:Socket
bindSocket	socket/ServerSocket.cpp	/^ServerSocket::bindSocket()$/;"	f	class:ServerSocket
checkFileStat	parser/ConfigParser.cpp	/^ConfigParser::checkFileStat(const char* path)$/;"	f	class:ConfigParser
checkUri	socket/ClientSocket.cpp	/^ClientSocket::checkUri(Server& server)$/;"	f	class:ClientSocket
connect	socket_/Socket.hpp	/^Socket<SocketType>::connect(socketAddr* addr) throw()$/;"	f	class:Socket
createEvent	io/Kqueue.cpp	/^Kqueue::createEvent(intptr_t fd, int16_t filter, uint16_t flags, uint32_t fflags,$/;"	f	class:Kqueue
createSocket	socket/ClientSocket.cpp	/^ClientSocket::createSocket(const sockType& initClass)$/;"	f	class:ClientSocket
createSocket	socket/ServerSocket.cpp	/^ServerSocket::createSocket(const sockaddr_in& sockaddrInet)$/;"	f	class:ServerSocket
deleteMethod	method/deleteMethod.hpp	/^class deleteMethod$/;"	c
deleteMethod_hpp	method/deleteMethod.hpp	/^#define deleteMethod_hpp$/;"	d
domain	socket_/SocketTypes.hpp	/^	static const int		domain = AF_INET;$/;"	m	struct:Tcp
e_eventStatus	io/IIoMultiplex.hpp	/^	enum	e_eventStatus$/;"	g	struct:IoMultiplexEnum
e_filters	io/IIoMultiplex.hpp	/^	enum	e_filters$/;"	g	struct:IoMultiplexEnum
e_method	http/Request.hpp	/^	enum	e_method$/;"	g	class:Request
e_operation	io/IIoMultiplex.hpp	/^	enum	e_operation$/;"	g	struct:IoMultiplexEnum
e_readStatus	parser/HttpRequestParser.hpp	/^	enum	e_readStatus$/;"	g	class:HttpRequestParser
e_type	Server.hpp	/^	enum	e_type$/;"	g	struct:EventObject
e_types	Logger.hpp	/^	enum	e_types$/;"	g	class:Logger
eat	tokenizer/FileTokenizer.cpp	/^FileTokenizer::eat(const string& target)$/;"	f	class:FileTokenizer
empty	tokenizer/FileTokenizer.cpp	/^FileTokenizer::empty() const$/;"	f	class:FileTokenizer
empty	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::empty() const$/;"	f	class:HttpStreamTokenizer
empty	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::empty() const$/;"	f	class:SocketStreamTokenizer
get	tokenizer/FileTokenizer.cpp	/^FileTokenizer::get()$/;"	f	class:FileTokenizer
get	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::get()$/;"	f	class:HttpStreamTokenizer
get	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::get()$/;"	f	class:SocketStreamTokenizer
getAddressString	socket_/Socket.hpp	/^Socket<SocketType>::getAddressString() const throw()$/;"	f	class:Socket
getConnectionIdx	test/Server.cpp	/^int	Server::getConnectionIdx(fd_set* fdSet)$/;"	f	class:Server
getDate	util/Util.cpp	/^Util::getDate(const char* format)$/;"	f	class:Util
getErrorLog	tokenizer/FileTokenizer.cpp	/^FileTokenizer::getErrorLog(const char* message)$/;"	f	class:FileTokenizer
getErrorMessage	exception/HttpErrorHandler.cpp	/^const std::string&	HttpErrorHandler::getErrorMessage(int errorCode)$/;"	f	class:HttpErrorHandler
getFd	io/Kqueue.hpp	/^	int	getFd() const {return ident;}$/;"	f	struct:Kevent
getFilter	io/Kqueue.hpp	/^	IoMultiplexEnum::e_filters	getFilter() const$/;"	f	struct:Kevent
getInfo	io/Kqueue.hpp	/^	int	getInfo() const {return data;}$/;"	f	struct:Kevent
getListenSocket	test/ServerManager.cpp	/^int	ServerManager::getListenSocket()$/;"	f	class:ServerManager
getMethod	method/getMethod.hpp	/^class getMethod$/;"	c
getMethod_hpp	method/getMethod.hpp	/^#define getMethod_hpp$/;"	d
getReadStatus	parser/HttpRequestParser.cpp	/^HttpRequestParser::getReadStatus() const$/;"	f	class:HttpRequestParser
getRequestSection	communicator/Request.cpp	/^Request::getRequestSection()$/;"	f	class:Request
getStatusMessage	communicator/Response.cpp	/^Response::getStatusMessage(int statusCode)$/;"	f	class:Response
getaddrinfo_wrapper	test/getaddrinfo_test.c	/^void	getaddrinfo_wrapper(const char *hostname, const char *service)$/;"	f
getc	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::getc()$/;"	f	class:HttpStreamTokenizer
getc	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::getc()$/;"	f	class:SocketStreamTokenizer
getline	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::getline()$/;"	f	class:HttpStreamTokenizer
handleEvent	Client.hpp	/^Client::handleEvent(const typename IoEventPoller::EventData& event)$/;"	f	class:Client
handleEvent	Server.hpp	/^Server::handleEvent(const typename IoEventPoller::EventData& event)$/;"	f	class:Server
handleEvent	Server_template.hpp	/^Server<IoEventHandler>::handleEvent(const EventData& event)$/;"	f	class:Server
handleEvent	cgi/Cgi.hpp	/^typename IoEventPoller::EventStatus	Cgi::handleEvent(const typename IoEventPoller::EventData& event)$/;"	f	class:Cgi
init	parser/ConfigParser.cpp	/^ConfigParser::init(string configPath)$/;"	f	class:ConfigParser
init	test/FdManager.cpp	/^void	FdManager::init()$/;"	f	class:FdManager
init	test/Server.cpp	/^void	Server::init()$/;"	f	class:Server
init	tokenizer/FileTokenizer.cpp	/^FileTokenizer::init(const string path)$/;"	f	class:FileTokenizer
init	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::init(string& buffer)$/;"	f	class:HttpStreamTokenizer
init	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::init(string& buffer)$/;"	f	class:SocketStreamTokenizer
initAddr	socket/ServerSocket.cpp	/^ServerSocket::initAddr(const sockaddr_in& sockaddrInet)$/;"	f	class:ServerSocket
initBuffer	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::initBuffer(string::size_type start)$/;"	f	class:SocketStreamTokenizer
initLogger	Logger.cpp	/^Logger::initLogger(const std::string& type, std::ostream& os)$/;"	f	class:Logger
initServer	Server.hpp	/^Server::initServer()$/;"	f	class:Server
initServer	Server_template.hpp	/^Server<IoEventHandler>::initServer()$/;"	f	class:Server
initServers	ServerManager.hpp	/^ServerManager<IoEventPoller>::initServers()$/;"	f	class:ServerManager
listen	socket_/Socket.hpp	/^Socket<SocketType>::listen(int backlog) throw()$/;"	f	class:Socket
listenSocket	socket/ServerSocket.cpp	/^ServerSocket::listenSocket()$/;"	f	class:ServerSocket
log	Logger.cpp	/^Logger::log(e_types type, const char* format, ...)$/;"	f	class:Logger
log	Logger.hpp	/^Logger::log(e_types type, const T& object)$/;"	f	class:Logger
m_addr	socket_/Socket.hpp	/^	socketAddr	m_addr;$/;"	m	class:Socket
m_aheadToken	tokenizer/HttpStreamTokenizer.hpp	/^	std::string		m_aheadToken;$/;"	m	class:HttpStreamTokenizer
m_alias	Location.hpp	/^	std::string		m_alias;$/;"	m	class:Location
m_buffer	http/Request.hpp	/^	std::string			m_buffer;$/;"	m	class:Request
m_buffer	tokenizer/HttpStreamTokenizer.hpp	/^	std::string*	m_buffer;$/;"	m	class:HttpStreamTokenizer
m_cgiPass	Location.hpp	/^	std::string		m_cgiPass;$/;"	m	class:Location
m_changeList	io/Kqueue.hpp	/^	std::vector<Kevent>	m_changeList;$/;"	m	class:Kqueue
m_clientMaxBodySize	Location.hpp	/^	std::string		m_clientMaxBodySize;$/;"	m	class:Location
m_clientMaxBodySize	Server.hpp	/^	int32_t						m_clientMaxBodySize;$/;"	m	class:Server
m_clientMaxBodySize	Server_template.hpp	/^	int32_t						m_clientMaxBodySize;$/;"	m	class:Server
m_connectionVec	test/Server.hpp	/^	std::vector<std::pair<int, Connection>>	m_connectionVec;$/;"	m	class:Server
m_cur	tokenizer/HttpStreamTokenizer.hpp	/^	std::string::size_type	m_cur;$/;"	m	class:HttpStreamTokenizer
m_end	tokenizer/HttpStreamTokenizer.hpp	/^	std::string::size_type	m_end;$/;"	m	class:HttpStreamTokenizer
m_errorCode	Server.hpp	/^	std::string					m_errorCode;$/;"	m	class:Server
m_errorCode	Server_template.hpp	/^	std::string					m_errorCode;$/;"	m	class:Server
m_errorMessage	exception/HttpErrorHandler.hpp	/^	std::string	m_errorMessage;$/;"	m	class:HttpErrorHandler
m_errorPages	Server.hpp	/^	std::string					m_errorPages;$/;"	m	class:Server
m_errorPages	Server_template.hpp	/^	std::string					m_errorPages;$/;"	m	class:Server
m_errorPath	Server.hpp	/^	std::string					m_errorPath;$/;"	m	class:Server
m_errorPath	Server_template.hpp	/^	std::string					m_errorPath;$/;"	m	class:Server
m_eventList	io/Kqueue.hpp	/^	std::vector<Kevent>	m_eventList;$/;"	m	class:Kqueue
m_exceptionSet	test/FdManager.hpp	/^	fd_set		m_exceptionSet;$/;"	m	class:FdManager
m_expires	Location.hpp	/^	std::string		m_expires;$/;"	m	class:Location
m_fd	Server.hpp	/^	const int				m_fd;$/;"	m	class:Server
m_fd	Server_template.hpp	/^	const int					m_fd;$/;"	m	class:Server
m_fd	socket_/Socket.hpp	/^	const int	m_fd;$/;"	m	class:Socket
m_fdManager	test/ServerManager.hpp	/^	FdManager			m_fdManager;$/;"	m	class:ServerManager
m_fstream	tokenizer/FileTokenizer.hpp	/^	std::fstream				m_fstream;$/;"	m	class:FileTokenizer
m_headerFieldsMap	http/Request.hpp	/^	HeaderFieldsMap		m_headerFieldsMap;$/;"	m	class:Request
m_idx	tokenizer/FileTokenizer.hpp	/^	unsigned int				m_idx;$/;"	m	class:FileTokenizer
m_index	Location.hpp	/^	std::string		m_index;$/;"	m	class:Location
m_index	Server.hpp	/^	std::string					m_index;$/;"	m	class:Server
m_index	Server_template.hpp	/^	std::string					m_index;$/;"	m	class:Server
m_kqueue	io/Kqueue.hpp	/^	int					m_kqueue;$/;"	m	class:Kqueue
m_limitExcept	Location.hpp	/^	std::string		m_limitExcept;$/;"	m	class:Location
m_listen	Server.hpp	/^	sockaddr_in					m_listen;$/;"	m	class:Server
m_listen	Server_template.hpp	/^	sockaddr_in					m_listen;$/;"	m	class:Server
m_listenSocket	test/Server.hpp	/^	int 									m_listenSocket;$/;"	m	class:Server
m_locationList	Server.hpp	/^	std::vector<Location>		m_locationList;$/;"	m	class:Server
m_locationList	Server_template.hpp	/^	std::vector<Location>		m_locationList;$/;"	m	class:Server
m_maxFd	test/FdManager.hpp	/^	int			m_maxFd;$/;"	m	class:FdManager
m_message	exception/ConfigParserException.hpp	/^	std::string	m_message;$/;"	m	class:ConfigParser::ConfigParserException
m_message	exception/FileTokenizerException.hpp	/^	std::string	m_message;$/;"	m	class:FileTokenizer::FileTokenizerException
m_method	http/Request.hpp	/^	int					m_method;$/;"	m	class:Request
m_methodType	communicator/Communicator.hpp	/^	std::string				m_methodType;$/;"	m	class:Communicator
m_methodType	communicator/Request.hpp	/^	std::string			m_methodType;$/;"	m	class:Request
m_parser	http/Request.hpp	/^	HttpRequestParser	m_parser;$/;"	m	class:Request
m_path	Location.hpp	/^	std::string		m_path;$/;"	m	class:Location
m_pos	test/Connection.hpp	/^	std::size_t		m_pos;$/;"	m	class:Connection
m_preBufferSize	communicator/Communicator.hpp	/^	int						m_preBufferSize;$/;"	m	class:Communicator
m_preBufferSize	communicator/Request.hpp	/^	int					m_preBufferSize;$/;"	m	class:Request
m_protocol	http/Request.hpp	/^	std::string			m_protocol;$/;"	m	class:Request
m_proxyPass	Location.hpp	/^	std::string		m_proxyPass;$/;"	m	class:Location
m_readSet	test/FdManager.hpp	/^	fd_set		m_readSet;$/;"	m	class:FdManager
m_readStatus	parser/HttpRequestParser.hpp	/^	e_readStatus		m_readStatus;$/;"	m	class:HttpRequestParser
m_registeredEventSize	io/Kqueue.hpp	/^	size_t				m_registeredEventSize;$/;"	m	class:Kqueue
m_request	Client.hpp	/^	Request			m_request;$/;"	m	class:Client
m_request	communicator/Communicator.hpp	/^	Request					m_request;$/;"	m	class:Communicator
m_request	socket/ClientSocket.hpp	/^	Request			m_request;$/;"	m	class:ClientSocket
m_request	test/Connection.hpp	/^	IRequest*		m_request;$/;"	m	class:Connection
m_requestBuffer	socket/ClientSocket.hpp	/^	std::string		m_requestBuffer;$/;"	m	class:ClientSocket
m_requestHeader	communicator/Communicator.hpp	/^	requestHeaderMap		m_requestHeader;$/;"	m	class:Communicator
m_requestHeaderMap	communicator/Request.hpp	/^	requestHeaderMap	m_requestHeaderMap;$/;"	m	class:Request
m_requestSection	communicator/Request.hpp	/^	int					m_requestSection;$/;"	m	class:Request
m_residue	http/Request.hpp	/^	int					m_residue;$/;"	m	class:Request
m_response	Client.hpp	/^	Response		m_response;$/;"	m	class:Client
m_response	communicator/Communicator.hpp	/^	Response				m_response;$/;"	m	class:Communicator
m_response	socket/ClientSocket.hpp	/^	Response		m_response;$/;"	m	class:ClientSocket
m_response	test/Connection.hpp	/^	IResponse*		m_response;$/;"	m	class:Connection
m_responseBuffer	socket/ClientSocket.hpp	/^	std::string		m_responseBuffer;$/;"	m	class:ClientSocket
m_root	Location.hpp	/^	std::string		m_root;$/;"	m	class:Location
m_root	Server.hpp	/^	std::string					m_root;$/;"	m	class:Server
m_root	Server_template.hpp	/^	std::string					m_root;$/;"	m	class:Server
m_server	Client.hpp	/^	const Server*	m_server; \/\/ is entire Server information is needed? or root directory is enough?$/;"	m	class:Client
m_serverList	ServerManager.hpp	/^	std::vector<Server>		m_serverList;$/;"	m	class:ServerManager
m_serverNames	Server.hpp	/^	std::string					m_serverNames;$/;"	m	class:Server
m_serverNames	Server_template.hpp	/^	std::string					m_serverNames;$/;"	m	class:Server
m_serverVec	test/ServerManager.hpp	/^	std::vector<Server>	m_serverVec;$/;"	m	class:ServerManager
m_size	test/Connection.hpp	/^	std::size_t		m_size;$/;"	m	class:Connection
m_socket	Client.hpp	/^	Socket<Tcp>		m_socket;$/;"	m	class:Client
m_socket	Server.hpp	/^	Socket<Tcp>			m_socket;$/;"	m	class:Server
m_socket	Server_template.hpp	/^	Socket<TcpSocket>			m_socket;$/;"	m	class:Server
m_socket	http/Request.hpp	/^	const Socket<Tcp>*	m_socket;$/;"	m	class:Request
m_socket	test/Connection.hpp	/^	int const		m_socket;$/;"	m	class:Connection
m_socketAddr	socket/ASocket.hpp	/^	struct sockaddr_in	m_socketAddr;$/;"	m	class:ASocket	typeref:struct:ASocket::sockaddr_in
m_socketAddrSize	socket/ASocket.hpp	/^	socklen_t			m_socketAddrSize;$/;"	m	class:ASocket
m_socketFd	socket/ASocket.hpp	/^	int					m_socketFd;$/;"	m	class:ASocket
m_start	tokenizer/HttpStreamTokenizer.hpp	/^	std::string::size_type	m_start;$/;"	m	class:HttpStreamTokenizer
m_target	http/Request.hpp	/^	std::string			m_target;$/;"	m	class:Request
m_token	tokenizer/HttpStreamTokenizer.hpp	/^	std::string		m_token;$/;"	m	class:HttpStreamTokenizer
m_tokenArr	tokenizer/FileTokenizer.hpp	/^	std::vector<t_tokenInfo>	m_tokenArr;$/;"	m	class:FileTokenizer
m_tokenizer	parser/AParser.hpp	/^	Tokenizer	m_tokenizer;$/;"	m	class:AParser
m_tokenizer	parser/LocationParser.hpp	/^	FileTokenizer&		m_tokenizer;$/;"	m	class:LocationParser
m_tokenizer	parser/ServerParser.hpp	/^	FileTokenizer&		m_tokenizer;$/;"	m	class:ServerParser
m_uri	communicator/Communicator.hpp	/^	std::string				m_uri;$/;"	m	class:Communicator
m_uri	communicator/Request.hpp	/^	std::string			m_uri;$/;"	m	class:Request
m_uriBufferSize	Server.hpp	/^	int32_t						m_uriBufferSize;$/;"	m	class:Server
m_uriBufferSize	Server_template.hpp	/^	int32_t						m_uriBufferSize;$/;"	m	class:Server
m_writeSet	test/FdManager.hpp	/^	fd_set		m_writeSet;$/;"	m	class:FdManager
main	main.cpp	/^int	main(int argc, char **argv, char **envp)$/;"	f
main	test/general_socket_tests.cpp	/^int	main()$/;"	f
main	test/getaddrinfo_test.c	/^int	main()$/;"	f
main	test/poll_test.cpp	/^int main()$/;"	f
main	test/readFunctionUsingString.cpp	/^int main(void)$/;"	f
main	test/socket_fork_test.cpp	/^int	main()$/;"	f
main	test/stringstream.cpp	/^int main()$/;"	f
main	test/syscall_test/getsocketopt_nonblock.cpp	/^int	main()$/;"	f
main	test/syscall_test/test.cpp	/^int	main()$/;"	f
makeReqeustBody	communicator/Request.cpp	/^Request::makeReqeustBody(const string& buffer)$/;"	f	class:Request
makeRequest	communicator/Request.cpp	/^Request::makeRequest(std::string& buffer)$/;"	f	class:Request
makeRequestHeader	communicator/Request.cpp	/^Request::makeRequestHeader(const string& buffer)$/;"	f	class:Request
makeRequestLine	communicator/Request.cpp	/^Request::makeRequestLine(const string& buffer)$/;"	f	class:Request
makeResponseHeader	communicator/Response.cpp	/^Response::makeResponseHeader(string& buffer)$/;"	f	class:Response
object	Server.hpp	/^	void*	object;$/;"	m	struct:EventObject
operator <<	Location.cpp	/^ostream&	operator<<(std::ostream& os, const Location& location)$/;"	f
operator <<	Server.cpp	/^operator<<(std::ostream& os, const Server& server)$/;"	f
operator <<	ServerManager.hpp	/^std::ostream&	operator<<(std::ostream& os, const ServerManager<IoEventPoller>& manager)$/;"	f
operator <<	Server_template.hpp	/^operator<<(std::ostream& os, const Server<IoEventHandler>& server)$/;"	f
operator =	Client.cpp	/^Client&	Client::operator=(Client const& client)$/;"	f	class:Client
operator =	Location.cpp	/^Location&	Location::operator=(const Location& location)$/;"	f	class:Location
operator =	Logger.cpp	/^Logger::operator=(Logger const& logger)$/;"	f	class:Logger
operator =	Server.cpp	/^Server::operator=(const Server& server)$/;"	f	class:Server
operator =	ServerManager.hpp	/^	ServerManager	&operator=(ServerManager const& serverManager) {(void)serverManager; return *this;}$/;"	f	class:ServerManager
operator =	Server_template.hpp	/^Server<IoEventHandler>::operator=(const Server& server)$/;"	f	class:Server
operator =	cgi/Cgi.cpp	/^Cgi&	Cgi::operator=(Cgi const& cgi)$/;"	f	class:Cgi
operator =	exception/ConfigParserException.cpp	/^ConfigParser::ConfigParserException::operator=(ConfigParserException const& configParserException)$/;"	f	class:ConfigParser::ConfigParserException
operator =	exception/HttpErrorHandler.cpp	/^HttpErrorHandler::operator=(const HttpErrorHandler& httpErrorHandler)$/;"	f	class:HttpErrorHandler
operator =	http/Request.cpp	/^Request::operator=(const Request& request)$/;"	f	class:Request
operator =	http/Response.cpp	/^Response::operator=(const Response& response)$/;"	f	class:Response
operator =	io/Epoll.cpp	/^Epoll&	Epoll::operator=(Epoll const& epoll)$/;"	f	class:Epoll
operator =	io/Kqueue.cpp	/^Kqueue::operator=(Kqueue const& kqueue)$/;"	f	class:Kqueue
operator =	parser/HttpRequestParser.cpp	/^HttpRequestParser::operator=(const HttpRequestParser& parser)$/;"	f	class:HttpRequestParser
operator =	socket/ClientSocket.cpp	/^ClientSocket::operator=(const ClientSocket &copy)$/;"	f	class:ClientSocket
operator =	socket_/Socket.hpp	/^	Socket	&operator=(const Socket& socket) {(void)socket; return *this;}$/;"	f	class:Socket
operator =	test/Connection.cpp	/^Connection&	Connection::operator=(Connection const& connection)$/;"	f	class:Connection
operator =	test/FdManager.cpp	/^FdManager&	FdManager::operator=(FdManager const& fdManager)$/;"	f	class:FdManager
operator =	test/Server.cpp	/^Server&	Server::operator=(Server const& server)$/;"	f	class:Server
operator =	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::operator=(const HttpStreamTokenizer& tokenizer)$/;"	f	class:HttpStreamTokenizer
operator =	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::operator=(const SocketStreamTokenizer& tokenizer)$/;"	f	class:SocketStreamTokenizer
parse	ServerManager.hpp	/^ServerManager<IoEventPoller>::parse(const char* path) try$/;"	f	class:ServerManager
parse	parser/ConfigParser.cpp	/^ConfigParser::parse(vector<Server>& servers) try$/;"	f	class:ConfigParser
parse	parser/HttpRequestParser.cpp	/^HttpRequestParser::parse(Request& request)$/;"	f	class:HttpRequestParser
parse	parser/LocationParser.cpp	/^LocationParser::parse(Location& location)$/;"	f	class:LocationParser
parse	parser/ServerParser.cpp	/^ServerParser::parse(Server& server)$/;"	f	class:ServerParser
parseArgument	util/Util.cpp	/^Util::parseArgument(int argc, char **argv)$/;"	f	class:Util
parseLocation	parser/ServerParser.cpp	/^ServerParser::parseLocation(Server& server)$/;"	f	class:ServerParser
parseServer	parser/ConfigParser.cpp	/^ConfigParser::parseServer(vector<Server>& servers)$/;"	f	class:ConfigParser
peek	tokenizer/FileTokenizer.cpp	/^FileTokenizer::peek()$/;"	f	class:FileTokenizer
peek	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::peek()$/;"	f	class:HttpStreamTokenizer
peek	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::peek()$/;"	f	class:SocketStreamTokenizer
poll	io/Kqueue.cpp	/^Kqueue::poll()$/;"	f	class:Kqueue
postMethod	method/postMethod.hpp	/^class postMethod$/;"	c
postMethod_hpp	method/postMethod.hpp	/^#define postMethod_hpp$/;"	d
printRequestMessage	communicator/Request.cpp	/^Request::printRequestMessage() const$/;"	f	class:Request
printTokens	tokenizer/FileTokenizer.cpp	/^FileTokenizer::printTokens() const$/;"	f	class:FileTokenizer
printTokensByLine	tokenizer/FileTokenizer.cpp	/^FileTokenizer::printTokensByLine() const$/;"	f	class:FileTokenizer
processEventObject	ServerManager.hpp	/^ServerManager<IoEventPoller>::processEventObject(const EventData& event, EventObject& eventObject)$/;"	f	class:ServerManager
processEvents	ServerManager.hpp	/^ServerManager<IoEventPoller>::processEvents(const EventList& events)$/;"	f	class:ServerManager
protocol	socket_/SocketTypes.hpp	/^	static const int		protocol = 0;$/;"	m	struct:Tcp
putMethod	method/putMethod.hpp	/^class putMethod$/;"	c
putMethod_hpp	method/putMethod.hpp	/^#define putMethod_hpp$/;"	d
readData	test/Connection.cpp	/^int	Connection::readData()$/;"	f	class:Connection
readHeaderFields	parser/HttpRequestParser.cpp	/^HttpRequestParser::readHeaderFields(HeaderFieldsMap& headerFieldsMap)$/;"	f	class:HttpRequestParser
readMessageBody	parser/HttpRequestParser.cpp	/^HttpRequestParser::readMessageBody()$/;"	f	class:HttpRequestParser
readOperation	test/Server.cpp	/^void	Server::readOperation(fd_set* fdSet)$/;"	f	class:Server
readRequest	communicator/Request.cpp	/^Request::readRequest(int eventInfo)$/;"	f	class:Request
readRequestBody	communicator/Communicator.cpp	/^int	 Communicator::readRequestBody(std::string& requestMessageBuffer)$/;"	f	class:Communicator
readSocket	socket/ClientSocket.cpp	/^ClientSocket::readSocket(int messageSize, Server& server)$/;"	f	class:ClientSocket
readStatusLine	parser/HttpRequestParser.cpp	/^HttpRequestParser::readStatusLine(Request& request)$/;"	f	class:HttpRequestParser
receiveRawData	http/Request.cpp	/^Request::receiveRawData(int eventInfo)$/;"	f	class:Request
receiveRequest	http/Request.cpp	/^Request::receiveRequest(int eventInfo)$/;"	f	class:Request
receiver	test/syscall_test/getsocketopt_nonblock.cpp	/^void	receiver() try$/;"	f
registerEvent	ServerManager.hpp	/^ServerManager<IoEventPoller>::registerEvent(int fd, typename IoEventPoller::e_operation op,$/;"	f	class:ServerManager
removeEventObject	ServerManager.hpp	/^ServerManager<IoEventPoller>::removeEventObject(int fd)$/;"	f	class:ServerManager
requestHeaderMap	communicator/Communicator.hpp	/^	typedef Request::requestHeaderMap requestHeaderMap;$/;"	t	class:Communicator
requestHeaderMap	communicator/Request.hpp	/^	typedef std::map<std::string, std::vector<std::string> > requestHeaderMap;$/;"	t	class:Request
requestSection	communicator/Request.hpp	/^	enum requestSection$/;"	g	class:Request
run	ServerManager.hpp	/^ServerManager<IoEventPoller>::run() try$/;"	f	class:ServerManager
s_bufferSize	test/Connection.hpp	/^	static std::size_t const	s_bufferSize = 1024;$/;"	m	class:Connection::std
s_defaultPort	Server.hpp	/^	static const int		s_defaultPort = 8000;$/;"	m	class:Server
s_eot	tokenizer/FileTokenizer.cpp	/^const std::string	FileTokenizer::s_eot = "";$/;"	m	class:FileTokenizer	file:
s_eot	tokenizer/FileTokenizer.hpp	/^	static const std::string	s_eot;$/;"	m	class:FileTokenizer
s_errorMessageTable	exception/HttpErrorHandler.cpp	/^std::string	HttpErrorHandler::s_errorMessageTable[1024] = {"", };$/;"	m	class:HttpErrorHandler	file:
s_errorMessageTable	exception/HttpErrorHandler.hpp	/^	static std::string			s_errorMessageTable[1024];$/;"	m	class:HttpErrorHandler
s_eventObjectMap	ServerManager.hpp	/^	static std::map<int, EventObject>		s_eventObjectMap;$/;"	m	class:ServerManager
s_eventObjectMap	ServerManager.hpp	/^std::map<int, EventObject>	ServerManager<IoEventPoller>::s_eventObjectMap;$/;"	m	class:ServerManager
s_ioEventPoller	ServerManager.hpp	/^	static IoEventPoller					s_ioEventPoller;$/;"	m	class:ServerManager
s_ioEventPoller	ServerManager.hpp	/^IoEventPoller	ServerManager<IoEventPoller>::s_ioEventPoller;$/;"	m	class:ServerManager
s_locationSetterMap	parser/LocationParser.hpp	/^	static std::map<std::string, t_setter>	s_locationSetterMap;$/;"	m	class:LocationParser
s_maxFd	test/general_socket_tests.cpp	/^	static int	s_maxFd;$/;"	m	struct:MaxFd	file:
s_ostream	Logger.cpp	/^ostream*			Logger::s_ostream = NULL;$/;"	m	class:Logger	file:
s_ostream	Logger.hpp	/^	static std::ostream*	s_ostream;$/;"	m	class:Logger
s_serverSetterMap	parser/ServerParser.hpp	/^	static std::map<std::string, t_setter>	s_serverSetterMap;$/;"	m	class:ServerParser
s_statusMessageTable	communicator/Response.hpp	/^	static std::map<int, std::string>	s_statusMessageTable;$/;"	m	class:Response
s_type	Logger.hpp	/^	static e_types			s_type;$/;"	m	class:Logger
s_writeSetPtr	test/Connection.hpp	/^	static fd_set*				s_writeSetPtr;$/;"	m	class:Connection
sendResponse	http/Response.cpp	/^void	Response::sendResponse(int eventInfo)$/;"	f	class:Response
sender	test/syscall_test/getsocketopt_nonblock.cpp	/^void	sender() try$/;"	f
setAlias	parser/LocationParser.cpp	/^LocationParser::setAlias(Location& location)$/;"	f	class:LocationParser
setCgiPass	parser/LocationParser.cpp	/^LocationParser::setCgiPass(Location& location)$/;"	f	class:LocationParser
setClientMaxBodySize	parser/LocationParser.cpp	/^LocationParser::setClientMaxBodySize(Location& location)$/;"	f	class:LocationParser
setClientMaxBodySize	parser/ServerParser.cpp	/^ServerParser::setClientMaxBodySize(Server& server)$/;"	f	class:ServerParser
setErrorCode	parser/ServerParser.cpp	/^ServerParser::setErrorCode(Server& server)$/;"	f	class:ServerParser
setErrorMessageTable	exception/HttpErrorHandler.cpp	/^void	HttpErrorHandler::setErrorMessageTable()$/;"	f	class:HttpErrorHandler
setErrorPages	parser/ServerParser.cpp	/^ServerParser::setErrorPages(Server& server)$/;"	f	class:ServerParser
setExpires	parser/LocationParser.cpp	/^LocationParser::setExpires(Location& location)$/;"	f	class:LocationParser
setIndex	parser/LocationParser.cpp	/^LocationParser::setIndex(Location& location)$/;"	f	class:LocationParser
setIndex	parser/ServerParser.cpp	/^ServerParser::setIndex(Server& server)$/;"	f	class:ServerParser
setLimitExcept	parser/LocationParser.cpp	/^LocationParser::setLimitExcept(Location& location)$/;"	f	class:LocationParser
setListenAddress	parser/ServerParser.cpp	/^ServerParser::setListenAddress(Server& server)$/;"	f	class:ServerParser
setLocationSetterMap	parser/LocationParser.cpp	/^void	LocationParser::setLocationSetterMap()$/;"	f	class:LocationParser
setPath	parser/LocationParser.cpp	/^LocationParser::setPath(Location& location)$/;"	f	class:LocationParser
setProxyPass	parser/LocationParser.cpp	/^LocationParser::setProxyPass(Location& location)$/;"	f	class:LocationParser
setRoot	parser/LocationParser.cpp	/^LocationParser::setRoot(Location& location)$/;"	f	class:LocationParser
setRoot	parser/ServerParser.cpp	/^ServerParser::setRoot(Server& server)$/;"	f	class:ServerParser
setServerNames	parser/ServerParser.cpp	/^ServerParser::setServerNames(Server& server)$/;"	f	class:ServerParser
setServerSetterMap	parser/ServerParser.cpp	/^void	ServerParser::setServerSetterMap()$/;"	f	class:ServerParser
setSocketFd	socket/ServerSocket.cpp	/^ServerSocket::setSocketFd(int domain, int type, int protocol)$/;"	f	class:ServerSocket
setStatusMessageTable	communicator/Response.cpp	/^Response::setStatusMessageTable(void)$/;"	f	class:Response
setToDefault	Server.cpp	/^Server::setToDefault()$/;"	f	class:Server
setToDefault	Server_template.hpp	/^Server<IoEventHandler>::setToDefault()$/;"	f	class:Server
setUriBufferSize	parser/ServerParser.cpp	/^ServerParser::setUriBufferSize(Server& server)$/;"	f	class:ServerParser
size	tokenizer/FileTokenizer.cpp	/^FileTokenizer::size()$/;"	f	class:FileTokenizer
sockType	socket/ASocket.hpp	/^	typedef T sockType;$/;"	t	class:ASocket
socketAddr	socket_/Socket.hpp	/^	typedef typename SocketType::socketAddr	socketAddr;$/;"	t	class:Socket
socketAddr	socket_/SocketTypes.hpp	/^	typedef sockaddr_in	socketAddr;$/;"	t	struct:Tcp
socketAddrLen	socket_/SocketTypes.hpp	/^	static const socklen_t	socketAddrLen = INET_ADDRSTRLEN;$/;"	m	struct:Tcp
splitString	test/stringstream.cpp	/^std::vector<std::string> splitString(const std::string& str)$/;"	f
ssTest	test/readFunctionUsingString.cpp	/^int ssTest(string& buffer, string path, int preBufferSize)$/;"	f
t_setter	parser/LocationParser.hpp	/^	typedef void	(LocationParser::*t_setter)(Location&);$/;"	t	class:LocationParser
t_setter	parser/ServerParser.hpp	/^	typedef void	(ServerParser::*t_setter)(Server&);$/;"	t	class:ServerParser
t_tokenInfo	tokenizer/FileTokenizer.hpp	/^	typedef std::pair<std::string, int>	t_tokenInfo;$/;"	t	class:FileTokenizer
tasMaxFd	test/general_socket_tests.cpp	/^	static int	tasMaxFd(int fd)$/;"	f	struct:MaxFd
toInt	parser/ConfigParser.cpp	/^ConfigParser::toInt(const string& str)$/;"	f	class:ConfigParser
toString	parser/ConfigParser.cpp	/^ConfigParser::toString(int num)$/;"	f	class:ConfigParser
tokenize	tokenizer/FileTokenizer.cpp	/^FileTokenizer::tokenize(const std::string& chunk, int lineNumber)$/;"	f	class:FileTokenizer
type	Server.hpp	/^	e_type	type;$/;"	m	struct:EventObject
type	socket_/SocketTypes.hpp	/^	static const int		type = SOCK_STREAM;$/;"	m	struct:Tcp
updateBuffer	parser/HttpRequestParser.cpp	/^HttpRequestParser::updateBuffer()$/;"	f	class:HttpRequestParser
updateBufferForBody	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::updateBufferForBody()$/;"	f	class:HttpStreamTokenizer
updateBufferForHeader	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::updateBufferForHeader()$/;"	f	class:HttpStreamTokenizer
what	exception/ConfigParserException.cpp	/^ConfigParser::ConfigParserException::what() const throw()$/;"	f	class:ConfigParser::ConfigParserException
what	exception/FileTokenizerException.hpp	/^	virtual const char*	what() const throw()$/;"	f	class:FileTokenizer::FileTokenizerException
writeData	test/Connection.cpp	/^int	Connection::writeData()$/;"	f	class:Connection
writeOperation	test/Server.cpp	/^void	Server::writeOperation(fd_set* fdSet)$/;"	f	class:Server
writeSocket	communicator/Communicator.cpp	/^Communicator::writeSocket(int fd)$/;"	f	class:Communicator
writeSocket	socket/ClientSocket.cpp	/^ClientSocket::writeSocket()$/;"	f	class:ClientSocket
~AParser	parser/AParser.hpp	/^	virtual ~AParser() {};$/;"	f	class:AParser
~ASocket	socket/ASocket.hpp	/^	virtual ~ASocket() {};$/;"	f	class:ASocket
~Cgi	cgi/Cgi.cpp	/^Cgi::~Cgi()$/;"	f	class:Cgi
~Client	Client.cpp	/^Client::~Client()$/;"	f	class:Client
~ClientSocket	socket/ClientSocket.cpp	/^ClientSocket::~ClientSocket()$/;"	f	class:ClientSocket
~Communicator	communicator/Communicator.cpp	/^Communicator::~Communicator()$/;"	f	class:Communicator
~ConfigParser	parser/ConfigParser.cpp	/^ConfigParser::~ConfigParser()$/;"	f	class:ConfigParser
~ConfigParserException	exception/ConfigParserException.cpp	/^ConfigParser::ConfigParserException::~ConfigParserException() throw()$/;"	f	class:ConfigParser::ConfigParserException
~Connection	test/Connection.cpp	/^Connection::~Connection()$/;"	f	class:Connection
~Epoll	io/Epoll.cpp	/^Epoll::~Epoll()$/;"	f	class:Epoll
~FdManager	test/FdManager.cpp	/^FdManager::~FdManager()$/;"	f	class:FdManager
~FileTokenizer	tokenizer/FileTokenizer.cpp	/^FileTokenizer::~FileTokenizer()$/;"	f	class:FileTokenizer
~FileTokenizerException	exception/FileTokenizerException.hpp	/^	virtual ~FileTokenizerException() throw() {};$/;"	f	class:FileTokenizer::FileTokenizerException
~HttpErrorHandler	exception/HttpErrorHandler.cpp	/^HttpErrorHandler::~HttpErrorHandler()$/;"	f	class:HttpErrorHandler
~HttpRequestParser	parser/HttpRequestParser.cpp	/^HttpRequestParser::~HttpRequestParser()$/;"	f	class:HttpRequestParser
~HttpStreamTokenizer	tokenizer/HttpStreamTokenizer.cpp	/^HttpStreamTokenizer::~HttpStreamTokenizer()$/;"	f	class:HttpStreamTokenizer
~IIoMultiplex	io/IIoMultiplex.hpp	/^	virtual ~IIoMultiplex() {};$/;"	f	class:IIoMultiplex
~IRequest	test/IRequest.hpp	/^	virtual ~IRequest() {};$/;"	f	class:IRequest
~IResponse	test/IResponse.hpp	/^	virtual ~IResponse() {};$/;"	f	class:IResponse
~ITokenizer	tokenizer/ITokenizer.hpp	/^	virtual ~ITokenizer() {};$/;"	f	class:ITokenizer
~Kqueue	io/Kqueue.cpp	/^Kqueue::~Kqueue()$/;"	f	class:Kqueue
~Location	Location.cpp	/^Location::~Location()$/;"	f	class:Location
~LocationParser	parser/LocationParser.cpp	/^LocationParser::~LocationParser()$/;"	f	class:LocationParser
~Logger	Logger.cpp	/^Logger::~Logger()$/;"	f	class:Logger
~Request	communicator/Request.cpp	/^Request::~Request()$/;"	f	class:Request
~Request	http/Request.cpp	/^Request::~Request()$/;"	f	class:Request
~Response	communicator/Response.cpp	/^Response::~Response()$/;"	f	class:Response
~Response	http/Response.cpp	/^Response::~Response()$/;"	f	class:Response
~Server	Server.cpp	/^Server::~Server()$/;"	f	class:Server
~Server	Server_template.hpp	/^Server<IoEventHandler>::~Server()$/;"	f	class:Server
~Server	test/Server.cpp	/^Server::~Server()$/;"	f	class:Server
~ServerManager	ServerManager.hpp	/^ServerManager<IoEventPoller>::~ServerManager()$/;"	f	class:ServerManager
~ServerManager	test/ServerManager.cpp	/^ServerManager::~ServerManager()$/;"	f	class:ServerManager
~ServerParser	parser/ServerParser.cpp	/^ServerParser::~ServerParser()$/;"	f	class:ServerParser
~ServerSocket	socket/ServerSocket.cpp	/^ServerSocket::~ServerSocket()$/;"	f	class:ServerSocket
~Socket	socket_/Socket.hpp	/^Socket<SocketType>::~Socket() throw()$/;"	f	class:Socket
~SocketStreamTokenizer	tokenizer/SocketStreamTokenizer.cpp	/^SocketStreamTokenizer::~SocketStreamTokenizer()$/;"	f	class:SocketStreamTokenizer
